{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","post","setPost","axios","get","then","res","data","console","log","catch","error","setData","fetch","response","json","search","setSearch","filterSearch","filter","f","title","toLowerCase","includes","href","style","textAlign","TextField","label","value","onChange","e","target","width","map","d","key","id","a","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6TA+EeA,MAvEf,WAAe,MAIWC,mBAAS,IAJpB,mBAINC,EAJM,KAIAC,EAJA,KAMbC,IAAMC,IAAI,8CACPC,MAAK,SAACC,GACLJ,EAAQI,EAAIC,MACZC,QAAQC,IAAIH,EAAIC,SAEjBG,OAAM,SAACC,GACNH,QAAQC,IAAIE,MAZH,MAiBWX,mBAAS,IAjBpB,mBAiBNO,EAjBM,KAiBAK,EAjBA,KAmBbC,MAAM,8CACHR,MAAK,SAAAS,GAAQ,OAAIA,EAASC,UAC1BV,MAAK,SAAAU,GACJH,EAAQG,GACRP,QAAQC,IAAIM,MAvBH,MA6Bef,mBAAS,IA7BxB,mBA6BNgB,EA7BM,KA6BEC,EA7BF,KA8BPC,EAAejB,EAAKkB,QAAO,SAACC,GAC9B,OAAOA,EAAEC,MAAMC,cAAcC,SAASP,EAAOM,kBAMjD,OACE,6BACE,uBAAGE,KAAK,uCAAR,IAA+C,wBAAIC,MAAO,CAAEC,UAAW,WAAxB,UAE/C,yBAAKD,MAAO,CAAEC,UAAW,WACvB,kBAACC,EAAA,EAAD,CAAWC,MAAM,SAASC,MAAOb,EAAQc,SAAU,SAAAC,GAAOd,EAAUc,EAAEC,OAAOH,QAAUJ,MAAO,CAAEQ,MAAM,OACtG,kBAAC,IAAD,OAGF,4BAIIf,EAAagB,KAAI,SAACC,GAAD,OACf,wBAAIC,IAAKD,EAAEE,IAAX,IAAiBF,EAAEd,MAAnB,SAON,6BACA,uBAAGG,KAAK,yCAAR,IAAiD,wBAAIC,MAAO,CAAEC,UAAW,WAAxB,UACjD,4BAEInB,EAAK2B,KAAI,SAACI,GAAD,OACP,wBAAIF,IAAKE,EAAED,IAAX,IAAiBC,EAAEjB,MAAnB,WC3DQkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEd3C,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAM2C,c","file":"static/js/main.409dabac.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport SearchOutlinedIcon from '@material-ui/icons/SearchOutlined';\nimport TextField from '@material-ui/core/TextField';\nimport './App.css';\nimport axios from 'axios';\n// const axios = require('axios');\n\n\nfunction App() {\n\n  // ======================== AXIOS ===================================\n\n  const [post, setPost] = useState([])\n  // Make a request for a user with a given ID\n  axios.get('https://jsonplaceholder.typicode.com/posts')\n    .then((res) => {\n      setPost(res.data)\n      console.log(res.data);\n    })\n    .catch((error) => {\n      console.log(error);\n    })\n\n  // ======================== FETCH ===================================\n\n  const [data, setData] = useState([])\n\n  fetch('https://jsonplaceholder.typicode.com/todos')\n    .then(response => response.json())\n    .then(json => {\n      setData(json)\n      console.log(json)\n    })\n\n\n  // ======================== SEARCH ===================================\n\n  const [search, setSearch] = useState(\"\")\n  const filterSearch = post.filter((f) => {\n      return f.title.toLowerCase().includes(search.toLowerCase())\n  })\n\n\n\n\n  return (\n    <div>\n      <a href=\"https://www.npmjs.com/package/axios\"> <h1 style={{ textAlign: 'center' }}>AXIOS</h1></a>\n      \n      <div style={{ textAlign: 'center'}}>\n        <TextField label=\"Search\" value={search} onChange={e => { setSearch(e.target.value) }} style={{ width:400 }}/>\n        <SearchOutlinedIcon/>\n      </div>\n\n      <ul>\n        {\n          // post.map((d) => (        [FOR NORMAL RETRIEVE]\n\n          filterSearch.map((d) => (\n            <li key={d.id}> {d.title} </li>\n          ))\n        }\n      </ul>\n\n      {/* ================================================================== */}\n\n      <hr />\n      <a href=\"https://jsonplaceholder.typicode.com/\"> <h1 style={{ textAlign: 'center' }}>FETCH</h1></a>\n      <ul>\n        {\n          data.map((a) => (\n            <li key={a.id}> {a.title} </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}